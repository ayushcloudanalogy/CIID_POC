default_platform(:ios)

platform :ios do
  # before_all do
  #   FASTLANE_USER = "ios@cloudanalogy.com"
  #   FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD = "wtyr-ydsj-sjlf-gpsb"
  # end
  desc "Load App Store Connect API Key information to use in lanes"
  lane :load_asc_api_key do
    app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_KEY_P8"],
      is_key_content_base64: true,
      in_house: false 
    )
  end

  desc "Installs signing certificate in the keychain and downloads provisioning profiles from store"
  lane :prepare_signing do |options|
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    keychain_name = "signing"
    keychain_password = "temp"

    delete_keychain(
      name: keychain_name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{keychain_name}-db")

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    import_certificate(
      certificate_path: ENV["SIGNING_KEY_FILE_PATH"],
      certificate_password: ENV["SIGNING_KEY_PASSWORD"],
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )

   
    sigh(
     
      api_key: api_key,
      readonly: true, 
      app_identifier:"com.reactjs.native.example.AppMySiteDemo",
      provisioning_name:"CICD_DEMO_APPSTORE",
    )
  end
  
  desc "Bump build number based on most recent TestFlight build number"
  lane :fetch_and_increment_build_number do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    current_version = get_version_number(
      target: "rncicd_poc" 
    )
    latest_build_number = latest_testflight_build_number(
      api_key: api_key,
      version: current_version,
      app_identifier: app_identifier
    )
    increment_build_number(
      build_number: (latest_build_number + 1),
    )
  end

  desc "Build the iOS app for release"
  lane :build_release do |options|
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    profile_name = "CICD_DEMO_APPSTORE"
    output_name = "example-iOS"
    export_method = "app-store"

   
    update_code_signing_settings(
      use_automatic_signing: false,
      targets: ["rncicd_poc"],
      code_sign_identity: "Apple Distribution",
      bundle_identifier: app_identifier,
      profile_name: profile_name,
      build_configurations: ["Release"]
    )

   
    gym(
      scheme: "rncicd_poc", 
      output_name: output_name,
      configuration: "Release",
      export_options: {
        method: export_method,
        provisioningProfiles: {
          app_identifier => profile_name 
        }
      }
    )
  end

  desc "Upload to TestFlight / ASC"
  lane :upload_release do
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    deliver(
      api_key: api_key,
      skip_screenshots: true,
      skip_metadata: true,
      skip_app_version_update: true,
      force: true, 
      run_precheck_before_submit: false,

    )

  end

  desc "Upload to Appstore"
  lane :upload_release_appstore do
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    deliver(
      api_key: api_key,
      skip_screenshots: true,
      skip_metadata: true,
      force: true, 
      submit_for_review: true,
      automatic_release: true,
      skip_binary_upload: true,
      run_precheck_before_submit: false,
    )
   
  end
  desc "Build and upload to TestFlight"
  lane :build_upload_testflight do
    load_asc_api_key
    prepare_signing
    fetch_and_increment_build_number
    build_release
    upload_release
  end

  desc "Build and upload to AppStore"
  lane :build_upload_appstore do
    load_asc_api_key
    prepare_signing
    fetch_and_increment_build_number
    build_release
    upload_release_appstore
  end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    # slack(message: "Build started")
    increment_build_number(xcodeproj: "rncicd_poc.xcodeproj")
    build_app(workspace: "rncicd_poc.xcworkspace", scheme: "rncicd_poc")
    upload_to_testflight
    # slack(message: "Successfully distributed a new beta build")
  end
 
  desc "Build the app"
  lane :build do
    begin
         build_a_app()
    rescue => exception 
         on_error(exception)
    end
  end
   ### Method for build app
  def build_a_app
    load_asc_api_key
    prepare_signing
    build_app(workspace: "rncicd_poc.xcworkspace", scheme: "rncicd_po",clean: true)
  end

  def on_error(exception)
    slack(
        message: "Some thing goes wrong",
        success: false,
        slack_url: "https://hooks.slack.com/services/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",
        attachment_properties: {
            fields: [
                {
                    title: "Build number",
                    value: ENV["BUILD_NUMBER"],
                },
                {
                    title: "Error message",
                    value: exception.to_s,
                    short: false
                }
            ]
        }
    )
 end

  lane :release do
  
    sync_code_signing(type: "appstore") 
    build_app(scheme: "rncicd_poc")
    upload_to_app_store                 
  end
end
