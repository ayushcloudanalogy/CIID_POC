# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
# FASTLANE_USER=<Apple USER ID>
# FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=<App-Specific Password>

default_platform(:ios)

platform :ios do
  # before_all do
  #   FASTLANE_USER = "ios@cloudanalogy.com"
  #   FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD = "wtyr-ydsj-sjlf-gpsb"
  # end
  desc "Load ASC API Key information to use in subsequent lanes"
  lane :load_asc_api_key do
    app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR1RBZ0VBTUJNR0J5cUdTTTQ5
      QWdFR0NDcUdTTTQ5QXdFSEJIa3dkd0lCQVFRZ0Uzc1VXK3huYXRKOEhCZjMKZ1ht
      RXFSZ2FXZUJoZGgrcm9NQ3oveWVoQ3J1Z0NnWUlLb1pJemowREFRZWhSQU5DQUFU
      a0IwMXlISHp1bG5GTgo3VytIZEZDWmVXc0hFeS9OL2Y4cThqdjZESC9CVUZlTDhB
      czM4OFdFb3NQYk5YSlJnZWVjcTJFVDBXaHlzNzY2Ckx2ZjNqZUtHCi0tLS0tRU5E
      IFBSSVZBVEUgS0VZLS0tLS0=",
      is_key_content_base64: true,
      in_house: false # detecting this via ASC private key not currently supported
    )
  end

  desc "Installs signing certificate in the keychain and downloads provisioning profiles from App Store Connect"
  lane :prepare_signing do |options|
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    keychain_name = "signing"
    keychain_password = "temp"

    delete_keychain(
      name: keychain_name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{keychain_name}-db")

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    import_certificate(
      certificate_path: ENV["SIGNING_KEY_FILE_PATH"],
      certificate_password: ENV["SIGNING_KEY_PASSWORD"],
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )

   # fetches and installs provisioning profiles from ASC
    sigh(
     adhoc: true,
      api_key: api_key,
      readonly: true, 
      provisioning_name:"CICD_DEMO_App"
    )

   
  end
  
  desc "Bump build number based on most recent TestFlight build number"
lane :fetch_and_increment_build_number do
 #fetch read your app identifier defined in your Appfile
 app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
 api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

 current_version = get_version_number(
   target: "rncicd_poc" # replace with your main target, required if you have more than one non-test target
 )
 latest_build_number = latest_testflight_build_number(
   api_key: api_key,
   version: current_version,
   app_identifier: app_identifier
 )
 increment_build_number(
   build_number: (latest_build_number + 1),
 )
end


desc "Build the iOS app for release"
lane :build_release do |options|
 app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

 profile_name = "CICD_DEMO_App" # replace with the name of the profile to use for the build
 output_name = "example-iOS" # specify the name of the .ipa file to generate
 export_method = "app-store" # specify the export method

 # turn off automatic signing during build so correct code signing identity is guaranteed to be used
 update_code_signing_settings(
   use_automatic_signing: false,
   targets: ["rncicd_poc"], # specify which targets to update code signing settings for
   code_sign_identity: "Apple Distribution", # replace with name of code signing identity if different
   bundle_identifier: app_identifier,
   profile_name: profile_name,
   build_configurations: ["Release"] # only toggle code signing settings for Release configurations
 )

 # build the app
 gym(
   scheme: "rncicd_poc", # replace with name of your project’s scheme
   output_name: output_name,
   configuration: "Release",
   export_options: {
     method: export_method,
     provisioningProfiles: {
       app_identifier => profile_name # here you can add any additional bundle identifiers and their associated provisioning profiles if you’re also building an app extension or other bundle identifier
     }
   }
 )
end

desc "Upload to TestFlight / ASC"
lane :upload_release do
 api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

 deliver(
     api_key: api_key,
     skip_screenshots: true,
     skip_metadata: true,
     skip_app_version_update: true,
     force: true, # skips verification of HTML preview file (since this will be run from a CI machine)
     run_precheck_before_submit: false # not supported through ASC API yet
 )
end

  desc "Build and upload to TestFlight"
   lane :build_upload_testflight do
     load_asc_api_key
     prepare_signing
     fetch_and_increment_build_number
     build_release
     upload_release
    # setup_ci
    # sync_code_signing(
    #   type: "appstore",
    #   app_identifier: 'com.reactjs.native.example.AppMySiteDemo',
    #   readonly: true
    # )
   end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    # slack(message: "Build started")
    increment_build_number(xcodeproj: "rncicd_poc.xcodeproj")
    build_app(workspace: "rncicd_poc.xcworkspace", scheme: "rncicd_poc")
    upload_to_testflight
    # slack(message: "Successfully distributed a new beta build")
  end

  lane :release do
    # capture_screenshots                  # generate new screenshots for the App Store
    sync_code_signing(type: "appstore")  # see code signing guide for more information
    build_app(scheme: "rncicd_poc")
    upload_to_app_store                  # upload your app to App Store Connect
  end
end
